import{_ as e,o as a,c as s,a as r}from"./app.49e42fe0.js";const u=JSON.parse('{"title":"编写规范个人版","description":"","frontmatter":{},"headers":[{"level":2,"title":"html相关","slug":"html相关","link":"#html相关","children":[]},{"level":2,"title":"css相关","slug":"css相关","link":"#css相关","children":[]},{"level":2,"title":"js/ts相关","slug":"js-ts相关","link":"#js-ts相关","children":[]},{"level":2,"title":"vue3相关","slug":"vue3相关","link":"#vue3相关","children":[]},{"level":2,"title":"命名相关","slug":"命名相关","link":"#命名相关","children":[]},{"level":2,"title":"其他代码编写相关（含优化）","slug":"其他代码编写相关-含优化","link":"#其他代码编写相关-含优化","children":[]}],"relativePath":"base/p-code-norm.md"}'),t={name:"base/p-code-norm.md"},c=r('<h1 id="编写规范个人版" tabindex="-1">编写规范个人版 <a class="header-anchor" href="#编写规范个人版" aria-hidden="true">#</a></h1><p><a href="/base/p-v3-problem.html">关于vue3中的使用问题</a></p><h2 id="html相关" tabindex="-1">html相关 <a class="header-anchor" href="#html相关" aria-hidden="true">#</a></h2><p>1、class使用bem的方式命名</p><h2 id="css相关" tabindex="-1">css相关 <a class="header-anchor" href="#css相关" aria-hidden="true">#</a></h2><p>1、css对应class的bem的方式使用</p><h2 id="js-ts相关" tabindex="-1">js/ts相关 <a class="header-anchor" href="#js-ts相关" aria-hidden="true">#</a></h2><p>1、每行代码结束后加上结束标志<br> 2、虽然js数组中可以放任意类型数据，在此处规定数组里放同一类型的数据，若不同则另起一组<br> 3、尽量少用合并对象和合并数组，会多出很多无用字段<br> 4、在传递参数的时候设置一个对象，用该对象限制传递的参数，筛选多余属性以及便于排查<br></p><h2 id="vue3相关" tabindex="-1">vue3相关 <a class="header-anchor" href="#vue3相关" aria-hidden="true">#</a></h2><p>1、由于compositionAPI，所以将相关逻辑的放一块，标上备注标题<br> 2、导入顺序依次vue类、工具类、hooks类、page页组件<br> 3、ref和reactive选择，个人选择上基本数据类型和会被重新赋值的对象（例如请求返回的值）使用ref，不会被重新赋值的对象（例如formState）使用reactive<br> 4、onMounted生命周期之类放在开头，defineExopse之类的内置函数放在末尾<br> 5、若使用了ts，使用的时候尽量精确的定义属性进行类型约束，进行ts的强使用，完善的ts可以看作一份文档用<br></p><h2 id="命名相关" tabindex="-1">命名相关 <a class="header-anchor" href="#命名相关" aria-hidden="true">#</a></h2><p>kebab-case（短横线连接式，e.g. user-info）<br> snake_case（下划线连接式，e.g. user_info）<br> camelCase（驼峰式，也叫小驼峰命名，e.g. userInfo）<br> PascalCase（帕斯卡命名式，也叫大驼峰命名，e.g. UserInfo）<br></p><p>1、函数命名使用camelCase<br> 2、常量命名使用全大写加snake_case方式<br> 3、文件夹命名使用kebab-case<br> 4、js和ts为后缀的文件命名使用camelCase命名<br> 5、vue和css文件命名使用kebab-case命名<br>  项目：在admin中使用camelCase（早期项目，不做更改），UI项目使用kebab-case，之后的都按这个格式<br>  扩展：在vue3中引入，组件名PascalCase命名，template标签中使用时使用kabe-case短横线分割；例如：<code>import TimelineItem from &#39;./src/timeline-item.vue&#39;</code><br> 6、资源文件使用snake_case命名，例如图片等<br></p><h2 id="其他代码编写相关-含优化" tabindex="-1">其他代码编写相关（含优化） <a class="header-anchor" href="#其他代码编写相关-含优化" aria-hidden="true">#</a></h2><p>1、请求的封装返回需要抛出Promise的格式<br> 2、关于异步的操作都使用async/await，通过该方式需要try/catch抛出错误，不建议使用then/catch的方式<br></p>',15),i=[c];function l(n,h,d,o,b,p){return a(),s("div",null,i)}const _=e(t,[["render",l]]);export{u as __pageData,_ as default};
